import Member from "@/models/Member";
import { ExtServicesEnum, fetchUserAndExtByExtId } from "@/contexts/UserExtContext";
import ExtCode, {ExtCodeTypes} from '@/models/ExtCode';

import { TelegramEngine } from "../TelegramEngine";

export function botStart(telegramEngine: TelegramEngine) {
  const c = telegramEngine.c;
  const bot = telegramEngine.bot;
  const clubId = '1';

  bot.start(async (ctx) => {
    const { userExt, user, isCreated: isUserCreated } = await fetchUserAndExtByExtId(c as any, {extId: ctx.from.id.toString(), service: 'tg', userData: ctx.from});
    const { value: member, isCreated: isMemberCreated } = await c.em.findOneOrCreateBy(Member, {user: {id: user.id}, club: {id: clubId}}, {});
    if (isMemberCreated) {
      await c.engines.access.service.addRole({member, user, hub: {id: clubId}}, 'guest');
    } else {
      const roles = await c.engines.access.service.getRolesMap({member, user, hub: {id: clubId}}, ['guest', 'member', 'applicant', 'rejected']);
      if (!Object.values(roles).some(Boolean)) {
        await c.engines.access.service.addRole({member, user, hub: {id: clubId}}, 'guest');
      }
    }

    let isHandled = false;
    if (ctx.payload) {
      const extCode = await c.m.findOne(ExtCode, {
        where: {
          service: ExtServicesEnum.tg,
          codeType: ExtCodeTypes.login,
          code: ctx.payload,
          used: false,
        },
        relations: {user: true, club: true}
      });

      if (extCode) {
        await ctx.reply(
          await c.t('bot.signin', user.lang, {}, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'),
          {
            reply_markup: {
              inline_keyboard: [
                [{text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥', callback_data: `signin:${ctx.payload}`}],
                [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'deleteMessage'}],
              ],
            },
          }
        );

        isHandled = true;
      }
    }

    if (!isHandled) {
      // if (isUserCreated || isMemberCreated) {
        ctx.reply(await c.t('bot.start', user.lang, {name: user.screenName}, botStartMessageTemplate), {
          reply_markup: {
            inline_keyboard: [
              [{text: '–ù–∞—á–∞—Ç—å', web_app: {url: `${c.Env.siteUrl}/mesto/application`}}],
            ],
          },
        })
      // } else {
      //   ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${user.screenName}! üëã`, {
      //     reply_markup: {
      //       inline_keyboard: [
      //         [{text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', web_app: {url: `${c.Env.siteUrl}/mesto/profile/edit`}}],
      //       ],
      //     },
      //   });
      // }
    }
  });
}

const botStartMessageTemplate = 
`–ü—Ä–∏–≤–µ—Ç, {{name}} üëã 

–Ø ‚Äî –±–æ—Ç –ù–µ–±–æ—Ç, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ Mesto, –≥–¥–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏, —Å—Ç–∞—Ä—Ç–∞–ø–µ—Ä—ã, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, —ç–∫—Å–ø–µ—Ä—Ç—ã –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –¥–ª—è –æ–±–º–µ–Ω–∞ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –æ–ø—ã—Ç–æ–º, –∞ —Ç–∞–∫–∂–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. 

–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —Ä–∞–∑–Ω—ã–µ —ç—Ç–∞–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞, –∏ –∑–¥–µ—Å—å –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ —Å–≤–æ—ë–º –ø—É—Ç–∏.

–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é Mesto, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É‚Äù`;